#DFS
import numpy as np
graf={'v0':['v1','v2'],'v1':['v2','v3'],'v2':[],'v3':['v4'],'v4':['v5'],'v5':[],'v6':['v2','v3']}
key=list(graf.keys())
#先从不带加权的开始
#先写一个关于结点的类
class Node:
    def __init__ (self,name):
        self.name=name
        self.next=[[],[],[],[],[],[],[]]
        self.state='Unvisited'
        self.rudu=0
        self.into=[[],[],[],[],[],[],[]]
class Node_list:
    def __init__ (self,keys):
        self.turn=[]
        for i in range(len(keys)):
            node=Node(keys[i])
            self.turn.append(node)
class Linklist:#python中类名的首元素要大写    
#初始化一个头指针
    def __init__ (self,name,keys,node__,i):
        self.i=i
        self.node_=node__
        self.keys=keys
        index=keys.index(name)
        self.head=self.node_.turn[index]
    def is_empty (self):
        return self.head==None
    def append(self,data):
        node=self.node_.turn[self.keys.index(data)]
        currunt=self.head
        while currunt.next[self.i]!=[]:
            p=currunt
            currunt=currunt.next[self.i]
        if currunt==self.head: 
            print(1)
            currunt.next[self.i]=node
            currunt.next[self.i].into[self.i]=self.head
        else:
            print(0)
            currunt.next[self.i]=node
            currunt.next[self.i].into[self.i]=p
                
                
class Graf:
    def __init__ (self,graf):
        self.graf=graf
        self.key=[]
        for Key in graf:
            self.key.append(Key)
        self.linklist_=[]
        self.Len=len(self.key)
        self.node__=Node_list(self.key)
        
    def shixian(self):
        for i in range(self.Len):
            _linklist=Linklist(self.key[i],self.key,self.node__,i)
            _Len=len(self.graf[self.key[i]])
            for j in range(0,_Len):
                _linklist.append(self.graf[self.key[i]][j])
            self.linklist_.append(_linklist)
                    
  #重复检索了 
#一层层搜索有出发点能到达的所有点
  
    def get_index(self,p):
        for i in range(self.Len):
            if p.name==self.key[i]:
                return i
      
    def visited(self,p,i):
        if p.next[i]==[] or p.next[i].state=='Visited':#找到p的上一个节点
            p=p.into[i]
            if p==[]:
                return
            else:
                while p not in self.key:
                    if p.into[i]==[]:
                        return 
    
                    else:
                        p=p.into[i]
                self.visited(self.linklist_[self.get_index(p)],self.get_index(p))

        else:
            while p.next[i]!=[]:
                if p.next[i].name in self.key and p.next[i].state=='Unvisited':
                    p=p.next[i]
                    print (p.name)
                    (self.node__.turn[self.key.index(p.name)]).state='Visited'
                    index=self.get_index(p)
                    self.visited(self.linklist_[index].head,index)
                else:
                    p=p.next[i]
            (self.node__.turn[self.key.index(p.name)]).state='Visited'
            self.visited(p,self.get_index(p))
    def DFS(self):
        for i in range(self.Len):
            print(self.node__.turn[i].into)
            p=self.linklist_[i].head
            if p.state=='Unvisited':
                print(p.name)
                (self.node__.turn[self.key.index(p.name)]).state='Visited'
                self.visited(p,i)
        
            
        
