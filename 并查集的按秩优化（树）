#并查集（树）
#路径压缩，按秩优化
import numpy as np
edges=[[1,3],[1,4],[2,5],[2,6],[0,1],[0,2]]
node=7
class Disjoint():
    def __init__ (self,edges):
        self.__parent=[]
        self.edges=edges
        self.rank=[]
        for i in range(node):
            self.__parent.append(0)
            self.rank.append(0)
        print(self.__parent)
    def find_root(self,i):
        if self.__parent[i]==0:
            return i
        while self.__parent[i]!=0:
            i=self.__parent[i]
        return i
    def union_(self,x,y):
        x_root=self.find_root(x)
        y_root=self.find_root(y)
        if x_root==y_root:
            return 0
        #出现了环return0
        if self.rank[x_root]<self.rank[y_root]:
            self.__parent[x_root]=y_root
        elif self.rank[x_root]>self.rank[y_root]:
            self.__parent[y_root]=x_root
        else:
                self.rank[x_root]+=1
                self.__parent[y_root]=x_root
            
    def final(self):
        for i in range(len(edges)):
            x=self.edges[i][0]
            print(x)
            y=self.edges[i][1]
            print(y)
            self.union_(x,y)
        print(self.__parent)
        
